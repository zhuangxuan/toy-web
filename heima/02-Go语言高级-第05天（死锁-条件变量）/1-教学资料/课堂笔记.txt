
select 超时处理：

	select 监听 time.After() 中 channel 的读事件。  如果定时时间到，系统会向该channel中写入系统当前时间。

	select {
	        case  <-time.After(time.Second * 5)
		定时到达后，要处理的内容
	} 

死锁： 不是锁的一种！！！是一种错误使用锁导致的现象。

	1. 单go程自己死锁

		channel 应该在 至少 2 个以上的 go程中进行通信。否则死锁！！！

	2. go程间channel访问顺序导致死锁

		使用channel一端读（写）， 要保证另一端写（读）操作，同时有机会执行。否则死锁。

	3. 多go程，多channel 交叉死锁

		Ago程，掌握M的同时，尝试拿N； Bgo程，掌握N的同时尝试拿M。 

	4. 在go语言中，尽量不要将 互斥锁、读写锁 与 channel 混用。 ――  隐性死锁。


互斥锁：（互斥量）

	A 、B go程 共同访问共享数据。 由于cpu调度随机，需要对 共享数据访问顺序加以限定（同步）。

	创建 mutex（互斥锁），访问共享数据之前，加锁，访问结束，解锁。 在Ago程加锁期间，B go程加锁会失败――阻塞。

	直至 A go程 解说mutex，B 从阻塞处。恢复执行。


读写锁：
	读时共享，写时独占。写锁优先级比读锁高。



条件变量：

	本身不是锁！！！ 但经常与锁结合使用！！

       使用流程：

	1.  创建 条件变量： var cond    sync.Cond

	2.  指定条件变量用的 锁：  cond.L = new(sync.Mutex)

	3.  cond.L.Lock()	给公共区加锁（互斥量）

	4.  判断是否到达 阻塞条件（缓冲区满/空）	―― for 循环判断

		for  len(ch) == cap(ch) {   cond.Wait() ―― 1) 阻塞 2) 解锁 3) 加锁

	5.  访问公共区 ―― 读、写数据、打印 

	6.  解锁条件变量用的 锁  cond.L.Unlock()

	7.  唤醒阻塞在条件变量上的 对端。 signal()  Broadcast()
























	

